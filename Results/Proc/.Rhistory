lines(y=res3[i,], x=t, col=alpha("gray", i/1000))
lines(y=avg3, x=t, col=alpha("blue"), lty=2, lwd=2)
lines(y=avg4, x=t, col=alpha("red"), lwd=2)
legend("topleft", c( 'sigma=0.5', 'sigma=0.3'), col=c("blue","red"), lty=c(2,1), lwd=c(2,2), bty='n')
params
sol <- ode ( y=x0 , func = cellODE, times = t, parms = params[1:3] )
library(deSolve)
sol <- ode ( y=x0 , func = cellODE, times = t, parms = params[1:3] )
### Cell ODE
cellODE <- function(t, x, params) {
cellx <- x[1]  # y cell coordinate
alpha <- params[1]
beta  <- params[2]
gamma <- params[3]
dcellx <- alpha * beta * exp(- beta * (cellx - gamma * t))/ ( 1 + exp(- beta * (cellx - gamma * t)))^2
list( c(dcellx))
}
sol <- ode ( y=x0 , func = cellODE, times = t, parms = params[1:3] )
sol
lines(y=sol[,2], x=sol[,1], col="green")
params
lines(y=sol[,2], x=sol[,1], col="green", lwd=2)
legend("topleft", c( 'sigma=0.5', 'sigma=0.3', ODE), col=c("blue","red", "green"), lty=c(2,1), lwd=c(2,2), bty='n')
legend("topleft", c( 'sigma=0.5', 'sigma=0.3', "ODE"), col=c("blue","red", "green"), lty=c(2,1), lwd=c(2,2), bty='n')
legend("topleft", c( 'sigma=0.5', 'sigma=0.3', "ODE"), col=c("blue","red", "green"), lty=c(2,1,1), lwd=c(2,2,2), bty='n')
for (i in 2:1000)
lines(y=res2[i,], x=t, col=alpha("black", i/1000))
for (i in 1:1000)
lines(y=res1[i,], x=t, col=alpha("gray", i/1000))
lines(y=avg1, x=t, col=alpha("red"), lwd=2)
lines(y=avg2, x=t, col=alpha("blue"), lty=2, lwd=2)
plot(y=res2[1,], x=t, type="l", col=alpha("black", 0.4), ylim=c(0, 5),
ylab="x_2", xlab="time", main= paste( 'alpha=0.3, beta=2, gamma=0.3'))
for (i in 2:1000)
lines(y=res2[i,], x=t, col=alpha("black", i/1000))
for (i in 1:1000)
lines(y=res1[i,], x=t, col=alpha("gray", i/1000))
lines(y=avg1, x=t, col=alpha("red"), lwd=2)
lines(y=avg2, x=t, col=alpha("blue"), lty=2, lwd=2)
### Res1-2
params <- c('alpha'=0.3, 'beta'=2, 'gamma'=0.3, 'sigma'=0.01)
sol <- ode ( y=x0 , func = cellODE, times = t, parms = params[1:3] )
lines(y=sol[,2], x=sol[,1], col="green", lwd=2)
legend("topleft", c( 'sigma=0.1', 'sigma=0.01', "ODE"), col=c("blue","red", "green"), lty=c(2,1,1), lwd=c(2,2,2), bty='n')
source('~/Dropbox/Phd/Literature/Identifiability/Code/SDEs.R')
source('~/Dropbox/Phd/Literature/Identifiability/Code/SDEs.R')
source('~/Dropbox/Phd/Literature/Identifiability/Code/SDEs.R')
source('~/Dropbox/Phd/Literature/Identifiability/Code/SDEs.R')
x1 = m.sim( T = 10, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
alpha = params[1], beta = params[2], gamma = params[3], sigma = params[4],
y.init = x0)
m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params, y.init = init)
m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params, y.init = x0)
r<-m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params, y.init = x0)
r$Y
JM_sde <- function(T, params, init=0, rep=10, delta=0.1 )
{
# Initialize matrix S of partial derivatives
S <- c()
norm <- rep(0, length(params))
sens <- matrix(nrow=)
for (j in 1 : length(params)) {
params_up <- params
params_lw <- params
# calculating new parameter value +/- delta% from true parameters (for parameter j)
params_up[j] <- (1 + delta) * params[j]
params_lw[j] <- (1 - delta) * params[j]
for (k in 1 : rep){
x1 = ode( init, tspan, odefun, params_lw, method='ode45')
x1 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
x2 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
# this calculates the design matrix using the finite difference method: the change in output / change in parameters
# column j has sensitivities for parameter j for each time point
sens[,k,j] <- (x1$Y - x2$Y) / ( 2 * delta * params[j])
}
avg <- apply(sens[,,j], 1, mean)
# normalize and add columns
norm[j] <- sqrt( sum( avg^2))
S <- cbind(S, avg / norm[j] )
}
## Calculate and return normalized matrix
Jmat <- t(S) %*% S
return(list('Jmat'=Jmat, 'norm'=norm))
}
J1 <- JM_sde(T=15, params, init=0, rep=10, delta=0.1 )
JM_sde <- function(T, params, init=0, rep=10, delta=0.1 )
{
# Initialize matrix S of partial derivatives
S <- c()
norm <- rep(0, length(params))
sens <- matrix(nrow=)
for (j in 1 : length(params)) {
params_up <- params
params_lw <- params
# calculating new parameter value +/- delta% from true parameters (for parameter j)
params_up[j] <- (1 + delta) * params[j]
params_lw[j] <- (1 - delta) * params[j]
for (k in 1 : rep){
x1 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
x2 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
# this calculates the design matrix using the finite difference method: the change in output / change in parameters
# column j has sensitivities for parameter j for each time point
sens[,k,j] <- (x1$Y - x2$Y) / ( 2 * delta * params[j])
}
avg <- apply(sens[,,j], 1, mean)
# normalize and add columns
norm[j] <- sqrt( sum( avg^2))
S <- cbind(S, avg / norm[j] )
}
## Calculate and return normalized matrix
Jmat <- t(S) %*% S
return(list('Jmat'=Jmat, 'norm'=norm))
}
params <- c('alpha'=0.3, 'beta'=2, 'gamma'=0.3, 'sigma'=0.01)
J1 <- JM_sde(T=15, params, init=0, rep=10, delta=0.1 )
test <- matrix(2,2,2)
test
test[,,1]
test<-array(2,2,2)
test<-array(c(2,2,2))
test
?arrray
?arrray
?array
test<-array( dim=c(2,2,2))
test
JM_sde <- function(T, params, init=0, rep=10, delta=0.1 )
{
# Initialize matrix S of partial derivatives
S <- c()
norm <- rep(0, length(params))
sens <- array( dim=c(100, length(params), ))
for (j in 1 : length(params)) {
params_up <- params
params_lw <- params
# calculating new parameter value +/- delta% from true parameters (for parameter j)
params_up[j] <- (1 + delta) * params[j]
params_lw[j] <- (1 - delta) * params[j]
for (k in 1 : rep){
x1 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
x2 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
# this calculates the design matrix using the finite difference method: the change in output / change in parameters
# column j has sensitivities for parameter j for each time point
sens[,k,j] <- (x1$Y - x2$Y) / ( 2 * delta * params[j])
}
avg <- apply(sens[,,j], 1, mean)
# normalize and add columns
norm[j] <- sqrt( sum( avg^2))
S <- cbind(S, avg / norm[j] )
}
## Calculate and return normalized matrix
Jmat <- t(S) %*% S
return(list('Jmat'=Jmat, 'norm'=norm))
}
JM_sde <- function(T, params, init=0, rep=10, delta=0.1 )
{
# Initialize matrix S of partial derivatives
S <- c()
norm <- rep(0, length(params))
sens <- array( dim=c(100, rep, length(params) ))
for (j in 1 : length(params)) {
params_up <- params
params_lw <- params
# calculating new parameter value +/- delta% from true parameters (for parameter j)
params_up[j] <- (1 + delta) * params[j]
params_lw[j] <- (1 - delta) * params[j]
for (k in 1 : rep){
x1 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
x2 = m.sim( T = T, L = 100, dt = 0.1, R = 10, a = 500, b = 500, N = 1,
params = params_up, y.init = init)
# this calculates the design matrix using the finite difference method: the change in output / change in parameters
# column j has sensitivities for parameter j for each time point
sens[,k,j] <- (x1$Y - x2$Y) / ( 2 * delta * params[j])
}
avg <- apply(sens[,,j], 1, mean)
# normalize and add columns
norm[j] <- sqrt( sum( avg^2))
S <- cbind(S, avg / norm[j] )
}
## Calculate and return normalized matrix
Jmat <- t(S) %*% S
return(list('Jmat'=Jmat, 'norm'=norm))
}
params <- c('alpha'=0.3, 'beta'=2, 'gamma'=0.3, 'sigma'=0.01)
J1 <- JM_sde(T=15, params, init=0, rep=10, delta=0.1 )
J1
J1 <- JM_sde(T=15, params, init=0, rep=100, delta=0.1 )
J1 <- JM_sde(T=15, params, init=0, rep=1000, delta=0.1 )
p <- proc.time()
J1 <- JM_sde(T=15, params, init=0, rep=1000, delta=0.1 )
pJ1<- proc.time() - p
pJ1
p <- proc.time()
J1 <- JM_sde(T=15, params, init=0, rep=2000, delta=0.1 )
pJ1<- proc.time() - p
pJ1
### Sensitivity matrices for SDEs
# Res1: alpha =0.3, beta=2, gamma=0.3, sigma=0.01
params <- c('alpha'=0.3, 'beta'=2, 'gamma'=0.3, 'sigma'=0.01)
p <- proc.time()
J1 <- JM_sde(T=15, params, init=0, rep=100000, delta=0.1 )
pJ1<- proc.time() - p
# Res2: alpha =0.3, beta=2, gamma=0.3, sigma=0.1
params <- c('alpha'=0.3, 'beta'=2, 'gamma'=0.3, 'sigma'=0.1)
p <- proc.time()
J2 <- JM_sde(T=15, params, init=0, rep=100000, delta=0.1 )
pJ2<- proc.time() - p
# Res3: alpha =2, beta=2, gamma=0.8, sigma=0.3
params <- c('alpha'=2, 'beta'=2, 'gamma'=0.8, 'sigma'=0.3)
p <- proc.time()
J3 <- JM_sde(T=15, params, init=0, rep=100000, delta=0.1 )
pJ3<- proc.time() - p
# Res4: alpha =2, beta=2, gamma=0.8, sigma=0.5
params <- c('alpha'=2, 'beta'=2, 'gamma'=0.8, 'sigma'=0.5)
p <- proc.time()
J4 <- JM_sde(T=15, params, init=0, rep=100000, delta=0.1 )
pJ1
pJ2
pJ3
pJ4
# Calculate sens matrix for type 2 for small timepoints
t <- seq (0, 2, le=100)
params <- c('alpha'=2, 'beta'=2, 'gamma'=0.8)
J6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$Jmat
n6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$norm
# data - simulated data
JM <- function(tspan, params, odefun, init, delta=0.1 )
{
# Initialize matrix S of partial derivatives
S <- c()
norm <- rep(0, length(params))
for (j in 1 : length(params)) {
params_up <- params
params_lw <- params
# calculating new parameter value +/- delta% from true parameters (for parameter j)
params_up[j] <- (1 + delta) * params[j]
params_lw[j] <- (1 - delta) * params[j]
x1 = ode( init, tspan, odefun, params_lw, method='ode45')
x2 = ode( init, tspan, odefun, params_up, method='ode45')
# this calculates the design matrix using the finite difference method: the change in output / change in parameters
# column j has sensitivities for parameter j for each time point
sens <- (x1[,2] - x2[,2]) / ( 2 * delta * params[j])
# normalize and add columns
norm[j] <- sqrt( sum( sens^2))
S <- cbind(S, sens / norm[j] )
}
## Calculate and return normalized matrix
Jmat <- t(S) %*% S
return(list('Jmat'=Jmat, 'norm'=norm))
}
t <- seq (0, 2, le=100)
params <- c('alpha'=2, 'beta'=2, 'gamma'=0.8)
J6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$Jmat
n6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$norm
save.image("~/Desktop/AverageSDE-sens(1).RData")
J4
# Res4: alpha =2, beta=2, gamma=0.8, sigma=0.5 - DIDN'T run
params <- c('alpha'=2, 'beta'=2, 'gamma'=0.8, 'sigma'=0.5)
p <- proc.time()
J4 <- JM_sde(T=15, params, init=0, rep=100000, delta=0.1 )
pJ4<- proc.time() - p
J4
pJ4
J4
pJ4
pJ1
J1
round(J1,3)
round(J1$Jmat,3)
round(J1$norm,3)
round(J2$Jmat,3)
round(J2$norm,3)
round(J3$Jmat,3)
round(J3$norm,3)
round(J4$norm,3)
round(J4$Jmat,3)
J6
n6
t <- seq (0, 2, le=100)
params <- c('alpha'=0.3, 'beta'=2, 'gamma'=0.3)
J6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$Jmat
n6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$norm
J6
n6
sol6 <- ode( init, tspan, odefun, params_lw, method='ode45')
sol6 <- ode( init=0, t, cellODE, params, method='ode45')
sol6 <- ode( 0, t, cellODE, params, method='ode45')
sol6
plot(sol6)
round(J6,3)
t <- seq (0, 2, le=100)
params <- c('alpha'=0.3, 'beta'=2, 'gamma'=0.3)
J6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$Jmat
n6 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$norm
sol6 <- ode( 0, t, cellODE, params, method='ode45')
round(J6)
round(J6,3)
J6
round(n6,3)
t <- seq (0, 15, le=100)
params <- c('alpha'=10, 'beta'=1, 'gamma'=1, 'sigma'=0.5)
J7 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$Jmat
n7 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$norm
J7
params <- c('alpha'=10, 'beta'=1, 'gamma'=1)
J7 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$Jmat
n7 <- JM( tspan=t, params=params, odefun=cellODE, init=x0, delta=0.1)$norm
sol7 <- ode( 0, t, cellODE, params, method='ode45')
J7
round(J7,3)
round(n7,3)
source('~/Desktop/Pseudopod/Code/PseudoFunctions.R')
library( shapes)
demo(shapes)
?read.in
?shapes
?shape
sooty
data(sooty)
sooty
sooty[,,1]
plot(sooty[,,1])
plot(sooty[,1,1], sooty[,2,1])
plot(sooty[,1,1], sooty[,2,1], "l")
plot(sooty[,1,1], sooty[,2,1], "b")
source('~/Desktop/Pseudopod/Code/PseudoFunctions.R')
res <- thinXY(j=1)
X <- res$X
Y <- res$Y
X
dim
dim(X)
dim(Y)
ansm <- procGPA(macm.dat)
ansm
macm
data(macm.dat)
macm
macm.dat
?macm.dat
dim(X)
nrow nrow
ncol(X)
?array
cell1 <- array (data = NA, dim = c( ncol(X), 2, 1000  ))
dim(cell1)
cell1[,,1]
cell1 <- array (data = NA, dim = c( ncol(X), 2, 1000  ))
for (i in 1:1000){
cell1[ , 1, i] <- X[i, ]
cell1[ , 2, i] <- Y[i, ]
}
cell1[,,1]
plot( cell1[,1,1],  cell1[,2,1], "b")
proc_cell1 <- procGPA(cell1)
proc_cell1
proc_cell1$rotated
dim(proc_cell1$rotated)
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)],joinline=c(1:60,1))
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)],joinline=c(1:79,1))
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)],joinline=c(1:79,1), pch=20)
?plotshapes
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)],joinline=c(1:79, 1))
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)],joinline=c(1:79, 1), symbol = 20)
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)],joinline=c(1:79, 1), symbol = 20, cex=0.1)
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)], joinline=c(1:79, 1), symbol = 20, color = alpha( brewer.pal(n=9, name="Oranges")[3,5,7], 0.7))
library(scales)
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)], joinline=c(1:79, 1), symbol = 20, color = alpha( brewer.pal(n=9, name="Oranges")[3,5,7], 0.7))
library(RColorBrewer)
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)], joinline=c(1:79, 1), symbol = 20, color = alpha( brewer.pal(n=9, name="Oranges")[3,5,7], 0.7))
brewer.pal(n=9, name="Oranges")[3,5,7]
brewer.pal(n=9, name="Oranges")[c(3,5,7)]
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)], joinline=c(1:79, 1), symbol = 20, color = alpha( brewer.pal(n=9, name="Oranges")[c(3,5,7)], 0.7))
shapepca(ans,type=”r”,mag=2,joinline=c(1:60,1),pcno=c(1:2)) shapepca(ans,type=”v”,mag=2,joinline=c(1:60,1),pcno=c(1:2)) shapepca(ans,type=”s”,mag=2,joinline=c(1:60,1),pcno=c(1:2)) shapepca(ans,type=”g”,mag=2,joinline=c(1:60,1),pcno=c(1:2)) pairs(cbind(ans$size,ans$rho,ans$scores[,1],ans$scores[,2],
ans$scores[,3]),label=c(”size”,”rho”,”pc1”,”pc2”,”pc3”))
shapepca(proc_cell1,type=”r”,mag=2,joinline=c(1:60,1),pcno=c(1:2))
shapepca(proc_cell1,type=”v”,mag=2,joinline=c(1:60,1),pcno=c(1:2))
shapepca(proc_cell1,type=”s”,mag=2,joinline=c(1:60,1),pcno=c(1:2))
shapepca(proc_cell1,type=”g”,mag=2,joinline=c(1:60,1),pcno=c(1:2))
shapepca(proc_cell1,type=”r”,mag=2,joinline=c(1:60,1),pcno=c(1:2))
plotshapes( proc_cell1$rotated, joinline=c(1:79, 1), symbol = 20)
plotshapes( proc_cell1$rotated, joinline=c(1:79, 1), symbol = 20, color = alpha('black', 0.2))
par(mfrow=c(1,1))
plotshapes( proc_cell1$rotated[,, c(100, 500, 1000)], joinline=c(1:79, 1), symbol = 20, color = alpha( brewer.pal(n=9, name="Oranges")[c(3,5,7)], 0.7))
Ktimes <- c(1, 200, 400, 600, 800, 1000)
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( brewer.pal(n=9, name="Oranges")[c(3,5,7)], 0.7))
?color
?plotshapes
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7), main="Theta1: Procrustes analysis with rotation ")
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7), main= c("Theta1: Procrustes analysis with rotation ") )
?plotshapes
mtext("Theta1: Procrustes analysis with rotation " )
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7),
mtext("Theta1: Procrustes analysis with scaling" )
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
# Procrustes analysis WITHOUT scaling
proc_cell1 <- procGPA(cell1)
# Procrustes analysis WITH scaling
proc_cell1 <- procGPA(cell1)
# Procrustes analysis WITHOUT scaling
proc_cell1_ns <- procGPA(cell1, scale = FALSE)
par(mfrow = c(1,2))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext("Theta1: Procrustes analysis with scaling" )
plotshapes( proc_cell1_ns$rotated, joinline=c(1:79, 1), symbol = 20, color = alpha('red', 0.2))
par(mfrow = c(1,2))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext("Theta1: Procrustes analysis with scaling" )
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext("Theta1: Procrustes analysis without scaling" )
par(mfrow = c(1,2))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext("Theta1: Procrustes analysis with scaling" )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext("Theta1: Procrustes analysis without scaling" )
par(mfrow = c(2,1))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext("Theta1: Procrustes analysis with scaling" )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext("Theta1: Procrustes analysis without scaling" )
setwd("~/Desktop/Pseudopod/Results/Proc")
j=1
pdf( paste("Theta", j, "_thin.pdf", sep=""), width = 7, height = 4)
par(mfrow = c(2,1))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext("Theta1: Procrustes analysis with scaling" )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext("Theta1: Procrustes analysis without scaling" )
dev.off()
pdf( paste("Theta", j, "_thin.pdf", sep=""), width = 7, height = 7)
par(mfrow = c(2,1))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext("Theta1: Procrustes analysis with scaling" )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext("Theta1: Procrustes analysis without scaling" )
dev.off()
# Cell 1
res <- thinXY(j=4)
X <- res$X
Y <- res$Y
# Rearrange data in an array of size: 79 x 2 x 1000 (i.e.: nodes x dimensions x cell_at_timepoint)
cell1 <- array (data = NA, dim = c( ncol(X), 2, 1000  ))
for (i in 1:1000){
cell1[ , 1, i] <- X[i, ]
cell1[ , 2, i] <- Y[i, ] }
# Procrustes analysis WITH scaling
proc_cell1 <- procGPA(cell1)
# Procrustes analysis WITHOUT scaling
proc_cell1_ns <- procGPA(cell1, scale = FALSE)
# Plotting
# Open pdf file to write plot in
pdf( paste("Theta", j, "_thin.pdf", sep=""), width = 7, height = 7)
par(mfrow = c(2,1))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext("Theta4: Procrustes analysis with scaling" )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext("Theta4: Procrustes analysis without scaling" )
dev.off()
j
mtext( paste("Theta" , j, ": Procrustes analysis without scaling", sep="") )
pdf( paste("Theta", j, "_thin.pdf", sep=""), width = 7, height = 7)
par(mfrow = c(2,1))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext( paste("Theta" , j, ": Procrustes analysis with scaling", sep="") )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext( paste("Theta" , j, ": Procrustes analysis without scaling", sep="") )
dev.off()
j
j=4
pdf( paste("Theta", j, "_thin.pdf", sep=""), width = 7, height = 7)
par(mfrow = c(2,1))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext( paste("Theta" , j, ": Procrustes analysis with scaling", sep="") )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext( paste("Theta" , j, ": Procrustes analysis without scaling", sep="") )
dev.off()
j <- 1
res <- thinXY(j=j)
X <- res$X
Y <- res$Y
# Rearrange data in an array of size: 79 x 2 x 1000 (i.e.: nodes x dimensions x cell_at_timepoint)
cell1 <- array (data = NA, dim = c( ncol(X), 2, 1000  ))
for (i in 1:1000){
cell1[ , 1, i] <- X[i, ]
cell1[ , 2, i] <- Y[i, ] }
# Procrustes analysis WITH scaling
proc_cell1 <- procGPA(cell1)
# Procrustes analysis WITHOUT scaling
proc_cell1_ns <- procGPA(cell1, scale = FALSE)
# Plotting
# Open pdf file to write plot in
pdf( paste("Theta", j, "_thin.pdf", sep=""), width = 7, height = 7)
par(mfrow = c(2,1))
plotshapes( proc_cell1$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "blue", 0.7))
mtext( paste("Theta" , j, ": Procrustes analysis with scaling", sep="") )
plotshapes( proc_cell1_ns$rotated[,, Ktimes], joinline=c(1:79, 1), symbol = 20, color = alpha( "red", 0.7))
mtext( paste("Theta" , j, ": Procrustes analysis without scaling", sep="") )
dev.off()
j
